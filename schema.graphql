scalar EmailAdd
scalar URL
scalar Upload
directive @auth on FIELD_DEFINITION | FIELD

type Query {
    getAuthors(filter: String):[Author]!
    getPosts(filter: String):[Post]!
    getAuthorById(id:ID!):Author!
    getPostById(id:ID!):Post!
    me: Author! @auth
    #getAuthorByEmail(email:String!)
    #getAuthorsDeleted:[Author]!
}

type Mutation {
    createAuthor(data:AuthorCreateInput!): Author!
    updateAuthor(data:AuthorUpdateInput!):Author!@auth
    deleteAuthor:String!@auth
    createPost(data:PostCreateInput!): Post!@auth
    updatePost(id:ID!,data:PostUpdateInput!):Post!@auth
    likePost(id:ID!):Post!@auth
    deletePost(id:ID!):String!@auth
    login(email:EmailAdd!, password: String!): Auth! 
}

type Author{
    _id: ID!
    first_name: String!
    last_name: String!
    password: String!
    email: EmailAdd!
    birth_date: String
    posts: [Post]!
    gender: GENDERS
    profile_pic: String
}

type Auth{
    token: String!
    message: String!
}

type Post{
    _id: ID!
    title: String!
    content:String!
    author: Author!
    cover: String!
    liked_by: [Author]!
    is_active: Boolean
}

input PostCreateInput{
    title: String!
    content:String!
    cover: Upload
    is_active: Boolean
}

input PostUpdateInput{
    title: String
    content:String
    cover: Upload
    liked_by: [String]!
    is_active: Boolean
}

input AuthorCreateInput{
    first_name: String!
    last_name: String!
    password: String!
    email: EmailAdd!
    birth_date: String
    gender: GENDERS
    profile_pic: Upload
    is_active: Boolean
}

input AuthorUpdateInput{
    first_name: String
    last_name: String
    email: EmailAdd
    password: String
    birth_date: String
    gender: GENDERS
    profile_pic: Upload
    is_active: Boolean
}

enum GENDERS{
    M
    F
    O
}