type Query {
    getAuthors:[Author]!
    getAuthorById(id:ID!):Author!
    #getAuthorByEmail(email:String!)
    #getAuthorsDeleted:[Author]!
}

type Mutation {
    createAuthor(data:AuthorCreateInput!): Author!
    updateAuthor(id:ID!,data:AuthorUpdateInput!):Author!
    deleteAuthor(id:ID!):Author!
}

type Author{
    _id: ID!
    first_name: String!
    last_name: String!
    email: String!
    birth_date: String!
    posts: [Post]!
    gender: GENDERS
    profile_pic: String!
}

type Post{
    _id: ID!
    title: String!
    content:String!
    author: Author!
    cover: String!
    liked_by: [Author]!
    is_active: Boolean
}

input AuthorCreateInput{
    first_name: String!
    last_name: String!
    email: String!
    birth_date: String
    gender: GENDERS
    profile_pic: String
    is_active: Boolean
}

input AuthorUpdateInput{
    first_name: String
    last_name: String
    email: String
    birth_date: String
    gender: GENDERS
    profile_pic: String
    is_active: Boolean
}

enum GENDERS{
    M
    F
    O
}